给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/add-two-numbers
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    struct ListNode *p1 = l1;
    struct ListNode *p2 = l2;
    struct ListNode *result = NULL;
    struct ListNode *tail = NULL;
    struct ListNode *new_node;
    int temp = 0;
    
    if(p1 == NULL || p2 == NULL) return NULL;
    
    while(p1 != NULL || p2 != NULL || temp != 0) {
        if(p1 != NULL) {
            temp += p1->val;
            p1 = p1->next;
        }
        if(p2 != NULL) {
            temp += p2->val;
            p2 = p2->next;
        }  
        
        new_node = (struct ListNode *)malloc(sizeof(struct ListNode));
        if (new_node == NULL) return NULL;
        new_node->val = temp%10;
        new_node->next = NULL;
        temp = temp/10;
        
        if(result == NULL) {
            result = new_node;
            tail = result;
        } else {
            tail->next = new_node;
            tail = new_node;
        }
    }

    return result;
}
