/*
https://leetcode.com/problems/symmetric-tree/
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
 

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
   3    3
 

Note:
Bonus points if you could solve it both recursively and iteratively.
*/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

bool is_tree_equal(struct TreeNode* left_tree, struct TreeNode* right_tree) {
    if (left_tree == NULL) {
        if  (right_tree == NULL) return true;
        return false;
    }
    if (right_tree == NULL) {
        if  (left_tree == NULL) return true;
        return false;
    }
    
    if (left_tree->val != right_tree->val ) return false;
    
    if (!is_tree_equal(left_tree->left, right_tree->right)) return false;
    if (!is_tree_equal(left_tree->right, right_tree->left)) return false;

    return true;
}

bool isSymmetric(struct TreeNode* root){
    if(root == NULL) return true;
    
    return is_tree_equal(root->left, root->right);
}

